{"ast":null,"code":"export async function getBytes(stream, onChunk) {\n  const reader = stream.getReader();\n  let result;\n  while (!(result = await reader.read()).done) {\n    onChunk(result.value);\n  }\n}\nexport function getLines(onLine) {\n  let buffer;\n  let position;\n  let fieldLength;\n  let discardTrailingNewline = false;\n  return function onChunk(arr) {\n    if (buffer === undefined) {\n      buffer = arr;\n      position = 0;\n      fieldLength = -1;\n    } else {\n      buffer = concat(buffer, arr);\n    }\n    const bufLength = buffer.length;\n    let lineStart = 0;\n    while (position < bufLength) {\n      if (discardTrailingNewline) {\n        if (buffer[position] === 10) {\n          lineStart = ++position;\n        }\n        discardTrailingNewline = false;\n      }\n      let lineEnd = -1;\n      for (; position < bufLength && lineEnd === -1; ++position) {\n        switch (buffer[position]) {\n          case 58:\n            if (fieldLength === -1) {\n              fieldLength = position - lineStart;\n            }\n            break;\n          case 13:\n            discardTrailingNewline = true;\n          case 10:\n            lineEnd = position;\n            break;\n        }\n      }\n      if (lineEnd === -1) {\n        break;\n      }\n      onLine(buffer.subarray(lineStart, lineEnd), fieldLength);\n      lineStart = position;\n      fieldLength = -1;\n    }\n    if (lineStart === bufLength) {\n      buffer = undefined;\n    } else if (lineStart !== 0) {\n      buffer = buffer.subarray(lineStart);\n      position -= lineStart;\n    }\n  };\n}\nexport function getMessages(onId, onRetry, onMessage) {\n  let message = newMessage();\n  const decoder = new TextDecoder();\n  return function onLine(line, fieldLength) {\n    if (line.length === 0) {\n      onMessage === null || onMessage === void 0 ? void 0 : onMessage(message);\n      message = newMessage();\n    } else if (fieldLength > 0) {\n      const field = decoder.decode(line.subarray(0, fieldLength));\n      const valueOffset = fieldLength + (line[fieldLength + 1] === 32 ? 2 : 1);\n      const value = decoder.decode(line.subarray(valueOffset));\n      switch (field) {\n        case 'data':\n          message.data = message.data ? message.data + '\\n' + value : value;\n          break;\n        case 'event':\n          message.event = value;\n          break;\n        case 'id':\n          onId(message.id = value);\n          break;\n        case 'retry':\n          const retry = parseInt(value, 10);\n          if (!isNaN(retry)) {\n            onRetry(message.retry = retry);\n          }\n          break;\n      }\n    }\n  };\n}\nfunction concat(a, b) {\n  const res = new Uint8Array(a.length + b.length);\n  res.set(a);\n  res.set(b, a.length);\n  return res;\n}\nfunction newMessage() {\n  return {\n    data: '',\n    event: '',\n    id: '',\n    retry: undefined\n  };\n}","map":{"version":3,"names":["getBytes","stream","onChunk","reader","getReader","result","read","done","value","getLines","onLine","buffer","position","fieldLength","discardTrailingNewline","arr","undefined","concat","bufLength","length","lineStart","lineEnd","subarray","getMessages","onId","onRetry","onMessage","message","newMessage","decoder","TextDecoder","line","field","decode","valueOffset","data","event","id","retry","parseInt","isNaN","a","b","res","Uint8Array","set"],"sources":["../../src/parse.ts"],"sourcesContent":[null],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}